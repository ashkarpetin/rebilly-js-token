{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rebilly JS Token Library Rebilly.js powers your checkout form and removes the need to send sensitive customer information directly to your servers. Use the library to generate payment tokens to reduce the scope of PCI DSS compliance. Rebilly API Spec The library uses the payment token endpoint from the Rebilly API. See the Rebilly API spec for more details. Including Rebilly.js Add Rebilly.js to your page using one of the following CDN providers, preferably at the bottom before the /body . Always use HTTPS when including the library. Rebilly CDN script src = https://cdn.rebilly.com/rebilly-js-token@1.5.0/rebilly.js / script Semver The JS SDK is released following Semver 2.0.0 guidelines. Each minor and patch version will be backward-compatible and incompatible changes will be introduced using major releases only.","title":"Introduction"},{"location":"#rebilly-js-token-library","text":"Rebilly.js powers your checkout form and removes the need to send sensitive customer information directly to your servers. Use the library to generate payment tokens to reduce the scope of PCI DSS compliance.","title":"Rebilly JS Token Library"},{"location":"#rebilly-api-spec","text":"The library uses the payment token endpoint from the Rebilly API. See the Rebilly API spec for more details.","title":"Rebilly API Spec"},{"location":"#including-rebillyjs","text":"Add Rebilly.js to your page using one of the following CDN providers, preferably at the bottom before the /body . Always use HTTPS when including the library. Rebilly CDN script src = https://cdn.rebilly.com/rebilly-js-token@1.5.0/rebilly.js / script","title":"Including Rebilly.js"},{"location":"#semver","text":"The JS SDK is released following Semver 2.0.0 guidelines. Each minor and patch version will be backward-compatible and incompatible changes will be introduced using major releases only.","title":"Semver"},{"location":"common-errors/","text":"Common Errors The Rebilly JS Token library uses CORS for transmitting data from your form to the Rebilly API. This section lists the most common errors you might encounter while implementing it. Silent Error Your endpoint URL is incorrect. See the endpoint topic on how to set a new endpoint. Contact us if you are unsure about which URL to use. If the problem persists after changing the endpoint the error might be caused by missing headers . Console Warning URL IS NOT ALLOWED BY ACCESS-CONTROL-ALLOW-ORIGIN 400 Bad Request The server returned a network error. Check the server response for more information about the error. Most common cases: Wrong endpoint/server: the CORS call was accepted but not understood by the remote server. Correct endpoint/server: validation failed or a field is missing. Check response for details and see Handling Response topic for implementation. 401 Unauthorized The server acknowledges the CORS transmission but the authorization key is incorrect. Verify the API User and API Secret Key match the values defined for your account and update the signature generation logic. Missing CORS Headers Rarely CORS requests will fail with a generic not allowed by Access-Control-Allow-Origin error while your endpoint is correctly set. This can happen if the required CORS headers are missing in either direction. Firewalls Some enterprise firewalls will strip incoming and outgoing headers that have not been whitelisted. The following headers must be supported over your network: Access-Control-Allow-Origin Access-Control-Allow-Headers Access-Control-Allow-Methods","title":"Common Errors"},{"location":"common-errors/#common-errors","text":"The Rebilly JS Token library uses CORS for transmitting data from your form to the Rebilly API. This section lists the most common errors you might encounter while implementing it.","title":"Common Errors"},{"location":"common-errors/#silent-error","text":"Your endpoint URL is incorrect. See the endpoint topic on how to set a new endpoint. Contact us if you are unsure about which URL to use. If the problem persists after changing the endpoint the error might be caused by missing headers . Console Warning URL IS NOT ALLOWED BY ACCESS-CONTROL-ALLOW-ORIGIN","title":"Silent Error"},{"location":"common-errors/#400-bad-request","text":"The server returned a network error. Check the server response for more information about the error. Most common cases: Wrong endpoint/server: the CORS call was accepted but not understood by the remote server. Correct endpoint/server: validation failed or a field is missing. Check response for details and see Handling Response topic for implementation.","title":"400 Bad Request"},{"location":"common-errors/#401-unauthorized","text":"The server acknowledges the CORS transmission but the authorization key is incorrect. Verify the API User and API Secret Key match the values defined for your account and update the signature generation logic.","title":"401 Unauthorized"},{"location":"common-errors/#missing-cors-headers","text":"Rarely CORS requests will fail with a generic not allowed by Access-Control-Allow-Origin error while your endpoint is correctly set. This can happen if the required CORS headers are missing in either direction. Firewalls Some enterprise firewalls will strip incoming and outgoing headers that have not been whitelisted. The following headers must be supported over your network: Access-Control-Allow-Origin Access-Control-Allow-Headers Access-Control-Allow-Methods","title":"Missing CORS Headers"},{"location":"generating-api-key/","text":"Generating a publishable API key To create a token you must first authenticate your requests using a publishable API key generated by Rebilly. Adding a new key Visit Rebilly's page for adding API keys , and select publishable as the type for the key. Set as the publishable key Copy the key you created and use it with setPublishableKey to authenticate your requests. This command must run before the createToken method. See the setPublishableKey method . Rebilly . setPublishableKey ( pk_live_... ); Deprecation of setAuth In previous versions of the library the preferred method of authentication was to generate a private signature using a private API key and Rebilly.setAuth . This method has been deprecated in favor of publishable API keys.","title":"Generating a publishable API key"},{"location":"generating-api-key/#generating-a-publishable-api-key","text":"To create a token you must first authenticate your requests using a publishable API key generated by Rebilly.","title":"Generating a publishable API key"},{"location":"generating-api-key/#adding-a-new-key","text":"Visit Rebilly's page for adding API keys , and select publishable as the type for the key. Set as the publishable key Copy the key you created and use it with setPublishableKey to authenticate your requests. This command must run before the createToken method. See the setPublishableKey method . Rebilly . setPublishableKey ( pk_live_... ); Deprecation of setAuth In previous versions of the library the preferred method of authentication was to generate a private signature using a private API key and Rebilly.setAuth . This method has been deprecated in favor of publishable API keys.","title":"Adding a new key"},{"location":"getting-started/","text":"Getting Started The library must be inserted in the page you will use to handle payment instrument data for either payment cards or bank accounts. Server-side SDK You must use one of the official Rebilly server-side SDKs to generate a public signature from your secret API key. See Authentication for more details. Including Rebilly.js Add Rebilly.js to your page using the following CDN provider, preferably at the bottom before the /body . Always use HTTPS when including the library. Rebilly CDN script src = https://cdn.rebilly.com/rebilly-js-token@1.5.0/rebilly.js / script The library is then available in the global scope as Rebilly . Authentication Once included in your checkout page, authenticate your token requests using a publishable API key generated in Rebilly . Rebilly . setPublishableKey ( pk_live_... ); See Generating a publishable API key for more details. Creating a token To create a token you must provide two parameters: the form or object literal with the payment instrument data (payment card or bank account) and a callback function that will receive the resulting token from the Rebilly API. Optionally you can also include an object literal defining extraData to combine to the main payload. This is useful when using a form to include information about the lead source. Form Submission When creating a token, prevent the default submission of the form until a value is returned by the API and injected into your page. // arguments: payload, callback, extraData Rebilly . createToken ( Node | Object , Function [, Object ]) Building the payment instrument data The first parameter will be the payment instrument data. You can use either a form node in your page or a plain object literal. Parse a form for the payment instrument The library can look for field with the data-rebilly attribute and compile the data from your form directly. Specify the field name associated in Rebilly as data-rebilly= fieldName . You can omit providing a method field, the library will detect it based on which fields you specified. PCI Compliance Never define name attributes for the payment card fields in your form. This will prevent field data from showing up in your server logs. form input data-rebilly = pan input type = number data-rebilly = expYear input type = number data-rebilly = expMonth input type = number data-rebilly = cvv / form Using the form above the library will detect a payment card. var form = document . getElementsByTagName ( form )[ 0 ]; Rebilly . createToken ( form , callback ); Use an object literal Alternatively use an object literal built following the API specification for defining a payment instrument. The accepted method values are payment-card and ach (bank account). var payload = { method : payment-card , paymentInstrument : { pan : 4111111111111111 , expYear : 2022 , expMonth : 12 , cvv : 123 }, // the first/last name is required billingAddress : { firstName : John , lastName : Doe } }; Rebilly . createToken ( payload , callback ); Minimal Requirements To create a payment token you must supply Rebilly with a minimal amount of fields. This applies to both methods of building the payment instrument data. Billing Address The billing address requires firstName and lastName . Payment Instrument The payment instrument requires different fields based on the method defined. For method payment-card : pan , expYear , expMonth and cvv For method ach : routingNumber , accountNumber , accountType and bankName See Token Fields for more details. Defining the callback The callback function should be used to inject the token returned by the API into your form. Once submitted, use the value in conjunction with one of the server-side SDKs to create the customer. // the token is returned as response.data.id var callback = function ( response ) { // create a hidden input field var tokenField = document . createElement ( input ); tokenField . setAttribute ( type , hidden ); tokenField . setAttribute ( name , payment-token ); tokenField . value = response . data . id ; // append to the form and submit to the server form . appendChild ( tokenField ); form . submit (); }; Rebilly . createToken ( form , callback ); Callback Argument The argument received by the callback contains additional information on the API request and can be used to detect validation errors. Property Type Description error boolean Defines whether there was an error with the request or not. message string The response message. Returns success if there was no errors, or the error message. status number The status code returned by the response. data Object The response data as returned by the API. The token is exposed as data.id . xhr Object The raw XHR request object. Changing the endpoint You can change the default production endpoint URL for testing purposes via Rebilly . setEndpoint . This must be done before the token is created to apply. // using the sandbox endpoint Rebilly . setEndpoint ( https://api-sandbox.rebilly.com/v2.1/tokens ); Example Form When combined together the most basic version of the page would look like the following example:","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"The library must be inserted in the page you will use to handle payment instrument data for either payment cards or bank accounts. Server-side SDK You must use one of the official Rebilly server-side SDKs to generate a public signature from your secret API key. See Authentication for more details.","title":"Getting Started"},{"location":"getting-started/#including-rebillyjs","text":"Add Rebilly.js to your page using the following CDN provider, preferably at the bottom before the /body . Always use HTTPS when including the library. Rebilly CDN script src = https://cdn.rebilly.com/rebilly-js-token@1.5.0/rebilly.js / script The library is then available in the global scope as Rebilly .","title":"Including Rebilly.js"},{"location":"getting-started/#authentication","text":"Once included in your checkout page, authenticate your token requests using a publishable API key generated in Rebilly . Rebilly . setPublishableKey ( pk_live_... ); See Generating a publishable API key for more details.","title":"Authentication"},{"location":"getting-started/#creating-a-token","text":"To create a token you must provide two parameters: the form or object literal with the payment instrument data (payment card or bank account) and a callback function that will receive the resulting token from the Rebilly API. Optionally you can also include an object literal defining extraData to combine to the main payload. This is useful when using a form to include information about the lead source. Form Submission When creating a token, prevent the default submission of the form until a value is returned by the API and injected into your page. // arguments: payload, callback, extraData Rebilly . createToken ( Node | Object , Function [, Object ])","title":"Creating a token"},{"location":"getting-started/#building-the-payment-instrument-data","text":"The first parameter will be the payment instrument data. You can use either a form node in your page or a plain object literal. Parse a form for the payment instrument The library can look for field with the data-rebilly attribute and compile the data from your form directly. Specify the field name associated in Rebilly as data-rebilly= fieldName . You can omit providing a method field, the library will detect it based on which fields you specified. PCI Compliance Never define name attributes for the payment card fields in your form. This will prevent field data from showing up in your server logs. form input data-rebilly = pan input type = number data-rebilly = expYear input type = number data-rebilly = expMonth input type = number data-rebilly = cvv / form Using the form above the library will detect a payment card. var form = document . getElementsByTagName ( form )[ 0 ]; Rebilly . createToken ( form , callback ); Use an object literal Alternatively use an object literal built following the API specification for defining a payment instrument. The accepted method values are payment-card and ach (bank account). var payload = { method : payment-card , paymentInstrument : { pan : 4111111111111111 , expYear : 2022 , expMonth : 12 , cvv : 123 }, // the first/last name is required billingAddress : { firstName : John , lastName : Doe } }; Rebilly . createToken ( payload , callback );","title":"Building the payment instrument data"},{"location":"getting-started/#minimal-requirements","text":"To create a payment token you must supply Rebilly with a minimal amount of fields. This applies to both methods of building the payment instrument data. Billing Address The billing address requires firstName and lastName . Payment Instrument The payment instrument requires different fields based on the method defined. For method payment-card : pan , expYear , expMonth and cvv For method ach : routingNumber , accountNumber , accountType and bankName See Token Fields for more details.","title":"Minimal Requirements"},{"location":"getting-started/#defining-the-callback","text":"The callback function should be used to inject the token returned by the API into your form. Once submitted, use the value in conjunction with one of the server-side SDKs to create the customer. // the token is returned as response.data.id var callback = function ( response ) { // create a hidden input field var tokenField = document . createElement ( input ); tokenField . setAttribute ( type , hidden ); tokenField . setAttribute ( name , payment-token ); tokenField . value = response . data . id ; // append to the form and submit to the server form . appendChild ( tokenField ); form . submit (); }; Rebilly . createToken ( form , callback ); Callback Argument The argument received by the callback contains additional information on the API request and can be used to detect validation errors. Property Type Description error boolean Defines whether there was an error with the request or not. message string The response message. Returns success if there was no errors, or the error message. status number The status code returned by the response. data Object The response data as returned by the API. The token is exposed as data.id . xhr Object The raw XHR request object.","title":"Defining the callback"},{"location":"getting-started/#changing-the-endpoint","text":"You can change the default production endpoint URL for testing purposes via Rebilly . setEndpoint . This must be done before the token is created to apply. // using the sandbox endpoint Rebilly . setEndpoint ( https://api-sandbox.rebilly.com/v2.1/tokens );","title":"Changing the endpoint"},{"location":"getting-started/#example-form","text":"When combined together the most basic version of the page would look like the following example:","title":"Example Form"},{"location":"license/","text":"License MIT License Copyright (c) 2017, Rebilly, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright (c) 2017, Rebilly, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"methods/","text":"Methods Other than validation tools , the library exposes key methods required to create a payment token. setPublishableKey setPublishableKey ( publishableKey ) Set the authentication for all API requests using your publishable API key. This is required to run before createToken . Visit Rebilly's page for adding API keys to create a publishable key. See Generating a publishable API key for more details. Example Rebilly . setPublishableKey ( pk_live_... ); createToken createToken ( payload , callback , extraData opt ) Trigger an API call to Rebilly that will generate a token for the payment instrument information provided in the payload . Once the request completes, the callback function is called with the response. Optionally you can also include an object literal defining extraData to combine to the main payload. This is useful when using a form to include information about the lead source. Example Using a form as the payload var form = document . getElementsByName ( form )[ 0 ]; Rebilly . createToken ( form , callback ); Using an object literal var payload = { method : payment-card // entirely optional paymentInstrument : { pan : 4111111111111111 , expYear : 2019 , expMonth : 12 , cvv : 123 }, billingAddress : { firstName : John , lastName : Doe } }; Rebilly . createToken ( payload , callback ); Callback function The function receives the response as its only argument. The response.error property returns true if there was an error before or after the request. Property Type Description error boolean Defines whether there was an error before or after the API request. Use this property to handle errors in conjunction with response.message and response.data . message string Returns success when the API request completes successfully or the error message returned by the server. data Object | Null Contains the data returned by the API when successful or the error details when validation fails. If there was no response data the value returned will be null . On success the payment token value can be accessed as reponse.data.id . status number The status code returned by the API request. When successful the status will be 201 . xhr Object An instance of the XMLHttpRequest used to complete the request. Can be used for debugging purposes and verifying the payload is being sent correctly. var callback = function ( response ) { //check for errors if ( response . error ) { //there was a validation or request error console . error ( response . message ); //previously we disabled the submit button to //prevent multiple clicks button . removeAttribute ( disabled ); } else { // create a hidden input field var tokenField = document . createElement ( input ); tokenField . setAttribute ( type , hidden ); tokenField . setAttribute ( name , payment-token ); var token = response . data . id ; //set the token as the value tokenField . value = token ; // append to the form and submit to the server form . appendChild ( tokenField ); form . submit (); } };","title":"Methods"},{"location":"methods/#methods","text":"Other than validation tools , the library exposes key methods required to create a payment token.","title":"Methods"},{"location":"methods/#setpublishablekey","text":"setPublishableKey ( publishableKey ) Set the authentication for all API requests using your publishable API key. This is required to run before createToken . Visit Rebilly's page for adding API keys to create a publishable key. See Generating a publishable API key for more details. Example Rebilly . setPublishableKey ( pk_live_... );","title":"setPublishableKey"},{"location":"methods/#createtoken","text":"createToken ( payload , callback , extraData opt ) Trigger an API call to Rebilly that will generate a token for the payment instrument information provided in the payload . Once the request completes, the callback function is called with the response. Optionally you can also include an object literal defining extraData to combine to the main payload. This is useful when using a form to include information about the lead source. Example","title":"createToken"},{"location":"token-fields/","text":"Defining a Token The payment token can be generated for payment cards or bank accounts. Each method supports different fields that are not shared. This information is described in the Rebilly API spec . The library requires you to define the payment instrument and billing address entities within the payment token. The method field is optional and can be detected from the contents of the payment instrument values. HTML vs Object Literal You can specify the contents of the payment token using either an HTML form element or an object literal. The former is parsed automatically by the library when you pass a form as the first parameter to createToken . The later requires you to manually define the object as you will see in the examples below. See Rebilly.createToken for more details. When using a form element, simply define input fields with a data-rebilly attribute and the value of said field should be the name of one of the fields listed for each payment method. Example PCI Compliance Never define name attributes for the payment card fields in your form. This will prevent field data from showing up in your server logs. form input data-rebilly = pan input type = number data-rebilly = expYear input type = number data-rebilly = expMonth input type = number data-rebilly = cvv / form var form = document . getElementsByName ( form )[ 0 ]; Rebilly . createToken ( form , callback ); Using the form above the library will detect a payment card. Fields Field Type Attribute Description method string Optional Defines the payment method used for the token. The value specified influences the requirements of the fields within the payment instrument. Can be either payment-card or ach (bank account). paymentInstrument object Required Contains the payment instrument fields. The value defined for method commands which values must be provided. billingAddress object Required Contains customer information related to the address. Example var payload = { method : payment-card // entirely optional paymentInstrument : { pan : 4111111111111111 , expYear : 2019 , expMonth : 12 , cvv : 123 }, billingAddress : { firstName : John , lastName : Doe } }; // using an object literal we will create the token Rebilly . createToken ( payload , callback ); Billing Address Please note that the firstName and lastName values are required to create a payment token. Any other billing address fields are optional. Field Description firstName required The customer's first name. This field is required to generate a payment token. lastName required The customer's last name. This field is required to generate a payment token. organization The customer's organization value. address The main address field. address2 The secondary address field. city The customer's city. region The customer's province or region. country The customer's country. This value is a ISO two-letter code format. e.g. US , CA postalCode The customer's ZIP or postal code. phoneNumbers An array of objects representing phone numbers. Each item must include a label and value emails An array of objects representing emails. Each item must include a label and value Methods The two supported payment methods require different fields to be valid. The fields listed below are not optional . Payment Card An object representing the payment card data. Field Description pan The payment card's number. expYear The year the card will expire on. expMonth The month the card will expire on. cvv The three to four digit code on the back of the card. Example paymentInstrument : { pan : 4111111111111111 , expYear : 2019 , expMonth : 12 , cvv : 123 }, Bank Account (ACH) An object representing the bank account data. Field Description routingNumber The routing number associated to the bank account. accountNumber The account's number accountType The account type. E.g. checking or savings. bankName The name of the bank with which the account is registered. Example paymentInstrument : { routingNumber : 12345678 , accountNumber : 12345678 , accountType : savings , bankName : Dominion Bank },","title":"Defining a Token"},{"location":"token-fields/#defining-a-token","text":"The payment token can be generated for payment cards or bank accounts. Each method supports different fields that are not shared. This information is described in the Rebilly API spec . The library requires you to define the payment instrument and billing address entities within the payment token. The method field is optional and can be detected from the contents of the payment instrument values.","title":"Defining a Token"},{"location":"token-fields/#html-vs-object-literal","text":"You can specify the contents of the payment token using either an HTML form element or an object literal. The former is parsed automatically by the library when you pass a form as the first parameter to createToken . The later requires you to manually define the object as you will see in the examples below. See Rebilly.createToken for more details. When using a form element, simply define input fields with a data-rebilly attribute and the value of said field should be the name of one of the fields listed for each payment method. Example PCI Compliance Never define name attributes for the payment card fields in your form. This will prevent field data from showing up in your server logs. form input data-rebilly = pan input type = number data-rebilly = expYear input type = number data-rebilly = expMonth input type = number data-rebilly = cvv / form var form = document . getElementsByName ( form )[ 0 ]; Rebilly . createToken ( form , callback ); Using the form above the library will detect a payment card.","title":"HTML vs Object Literal"},{"location":"token-fields/#fields","text":"Field Type Attribute Description method string Optional Defines the payment method used for the token. The value specified influences the requirements of the fields within the payment instrument. Can be either payment-card or ach (bank account). paymentInstrument object Required Contains the payment instrument fields. The value defined for method commands which values must be provided. billingAddress object Required Contains customer information related to the address. Example var payload = { method : payment-card // entirely optional paymentInstrument : { pan : 4111111111111111 , expYear : 2019 , expMonth : 12 , cvv : 123 }, billingAddress : { firstName : John , lastName : Doe } }; // using an object literal we will create the token Rebilly . createToken ( payload , callback );","title":"Fields"},{"location":"token-fields/#billing-address","text":"Please note that the firstName and lastName values are required to create a payment token. Any other billing address fields are optional. Field Description firstName required The customer's first name. This field is required to generate a payment token. lastName required The customer's last name. This field is required to generate a payment token. organization The customer's organization value. address The main address field. address2 The secondary address field. city The customer's city. region The customer's province or region. country The customer's country. This value is a ISO two-letter code format. e.g. US , CA postalCode The customer's ZIP or postal code. phoneNumbers An array of objects representing phone numbers. Each item must include a label and value emails An array of objects representing emails. Each item must include a label and value","title":"Billing Address"},{"location":"token-fields/#methods","text":"The two supported payment methods require different fields to be valid. The fields listed below are not optional .","title":"Methods"},{"location":"token-fields/#payment-card","text":"An object representing the payment card data. Field Description pan The payment card's number. expYear The year the card will expire on. expMonth The month the card will expire on. cvv The three to four digit code on the back of the card. Example paymentInstrument : { pan : 4111111111111111 , expYear : 2019 , expMonth : 12 , cvv : 123 },","title":"Payment Card"},{"location":"token-fields/#bank-account-ach","text":"An object representing the bank account data. Field Description routingNumber The routing number associated to the bank account. accountNumber The account's number accountType The account type. E.g. checking or savings. bankName The name of the bank with which the account is registered. Example paymentInstrument : { routingNumber : 12345678 , accountNumber : 12345678 , accountType : savings , bankName : Dominion Bank },","title":"Bank Account (ACH)"},{"location":"validation-tools/","text":"Validation Tools The JS library comes with a set of validation tools that can be used to verify the payment card and customer data. They can be accessed via the Rebilly . validate namespace. Opt-In Validation is not used automatically on the client-side and is provided as an opt-in feature. Payment Card Credit card validation functions are found in the Rebilly . validate . card namespace. All functions return booleans. Luhn Algorithm The Luhn Algorithm is a simple checksum formula used to validate a variety of identification numbers . This function expects only digits. Rebilly . validate . card . luhn ( 1131313 ); // false Rebilly . validate . card . luhn ( 4000111122223333 ); // false Rebilly . validate . card . luhn ( 4601398104203552 ); // true Rebilly . validate . card . luhn ( 4494590804949548 ); // true // the function will not strip dashes and spaces // and otherwise valid numbers will fail if passed with them Rebilly . validate . card . luhn ( 5349-2077-8395-2559 ); // false Rebilly . validate . card . luhn ( 5349207783952559 ); // true Card Number Ensures the card number is valid by checking the length and Luhn algorithm result. Spaces and dashes are ignored and can be passed along with the card number. Rebilly . validate . card . cardNumber ( 4601398104203552 ); // true Rebilly . validate . card . cardNumber ( 4494590804949548 ); // true // with spaces and dashes Rebilly . validate . card . cardNumber ( 4494 5908 0494 9548 ); // true Rebilly . validate . card . cardNumber ( 4494-5908-0494-9548 ); // true Rebilly . validate . card . cardNumber ( 43-57-45-59-57-71-61-42 ); // true // illegal characters Rebilly . validate . card . cardNumber ( 4357455AD#EE8 EEAG ); // false Rebilly . validate . card . cardNumber ( 4838.2379.4185.1360 ); // false Card Expiry Validates the card's expiry month (mm) and year (yyyy). Only accepts digits as integers or strings. // invalid year format Rebilly . validate . card . expiry ( 01 , 15 ); // false // digits only Rebilly . validate . card . expiry ( jan , 2014 ); // false // invalid month Rebilly . validate . card . expiry ( 22 , 2022 ); // false // card expired Rebilly . validate . card . expiry ( 11 , 2001 ); // false // digit as strings Rebilly . validate . card . expiry ( 01 , 2035 ); // true // digits as integers Rebilly . validate . card . expiry ( 1 , 2033 ); // true // mix of string and integer Rebilly . validate . card . expiry ( 04 , 2031 ); // true CVV Validates the card's CVV number and length. Only accepts digits as integer or string. // digits only Rebilly . validate . card . cvv ( 1 2 3 ); // false Rebilly . validate . card . cvv ( 1a3 ); // false // invalid length Rebilly . validate . card . cvv ( 11111 ); // false // digit as string Rebilly . validate . card . cvv ( 011 ); // true // digits as integers Rebilly . validate . card . cvv ( 123 ); // true Customer (Billing Address) Customer data validation functions are found in the Rebilly . validate . customer namespace. All functions will return a boolean. Length restrictions are based on the Rebilly API specifications for each field. Unicode All address related validation functions (firstName, lastName, address, city, region) are Unicode compatible. First Name Validates the firstName field. Maximum length of 45 unicode characters. Commas, periods, single quotes and dashes , . - are allowed. Digits are not allowed. Rebilly . validate . customer . firstName ( Andrei Theodorescu ); //true //unicode Rebilly . validate . customer . firstName ( \u30ab\u30a6\u30dc\u30fc\u30a4\u30d3\u30d0\u30c3\u30d7 ); //true //invalid characters Rebilly . validate . customer . firstName ( Robert * Cloud ); //false Rebilly . validate . customer . firstName ( Jebediah_Morrisson ); //false Last Name Validates the lastName field. Maximum length of 45 unicode characters. Commas, periods, single quotes and dashes , . - are allowed. //unicode Rebilly . validate . customer . lastName ( \ud6c8\ubbfc\uc815\uc74c \u8a13\u6c11\u6b63\u97f3 ); //true Rebilly . validate . customer . lastName ( \u0437\u0434\u0440\u0430\u0432\u043e \u0437\u0431\u043e\u0433\u0443\u043c ); //true //with digits Rebilly . validate . customer . lastName ( De 08 Laurentiis ); //true //invalid characters Rebilly . validate . customer . lastName ( De;Laurentiis ); //false Address Can be used to validate address and address2 fields. Maximum length of 60 unicode characters. Commas, periods, single quotes, dashes, hash signs, forward slashes and backslashes , . - / \\ are allowed. Rebilly . validate . customer . address ( 6745 Rue De Carufel ); // true // unicode Rebilly . validate . customer . address ( 012 Brunnenstra\u00dfe ); // true Rebilly . validate . customer . address ( \u74b0\u4e03\u901a\u308a/\u90fd\u9053318\u53f7\u7dda ); // true // invalid characters Rebilly . validate . customer . address ( 012 Brunnenstra\u00dfe $*$ * ); // false Rebilly . validate . customer . address ( Aftcastle, Berlin = 09:339:1 ); // false City Validates the city field. Maximum length of 45 unicode characters. Commas, periods, single quotes and dashes , . - are allowed. Rebilly . validate . customer . city ( Pozdravljeni adijo ); // true // invalid characters Rebilly . validate . customer . city ( Pozdravljeni ++ adijo ); // false Region Validates the region field. Maximum length of 45 unicode characters. Commas, periods, single quotes and dashes , . - are allowed. Rebilly . validate . customer . region ( Pozdravljeni adijo ); // true // invalid characters Rebilly . validate . customer . region ( Pozdravljeni ++ adijo ); // false Postal Code Validates the postalCode field. Maximum length of 10 characters. Only letters, digits, spaces and dashes are allowed. Rebilly . validate . customer . postalCode ( h1n1n1 ); // true Rebilly . validate . customer . postalCode ( h1n-1n1 ); // true Rebilly . validate . customer . postalCode ( h2b 4g6 ); // true // invalid characters Rebilly . validate . customer . postalCode ( h1n+1n1 ); // false Phone Number Validates the phoneNumber field. Maximum length of 20 characters. Only digits, parentheses, spaces and dashes are allowed. The international call prefix + can also be used. // string Rebilly . validate . customer . phoneNumber ( (514) 321-7654 ); // true // integer - not recommended Rebilly . validate . customer . phoneNumber ( 5143217654 ); // true // international call prefix Rebilly . validate . customer . phoneNumber ( +01-800-4536 ); // true // invalid characters Rebilly . validate . customer . phoneNumber ( [514]-321-7654 ); // false Rebilly . validate . customer . phoneNumber ( 1-800-CALL ); // false","title":"Validation Tools"},{"location":"validation-tools/#validation-tools","text":"The JS library comes with a set of validation tools that can be used to verify the payment card and customer data. They can be accessed via the Rebilly . validate namespace. Opt-In Validation is not used automatically on the client-side and is provided as an opt-in feature.","title":"Validation Tools"},{"location":"validation-tools/#payment-card","text":"Credit card validation functions are found in the Rebilly . validate . card namespace. All functions return booleans.","title":"Payment Card"},{"location":"validation-tools/#luhn-algorithm","text":"The Luhn Algorithm is a simple checksum formula used to validate a variety of identification numbers . This function expects only digits. Rebilly . validate . card . luhn ( 1131313 ); // false Rebilly . validate . card . luhn ( 4000111122223333 ); // false Rebilly . validate . card . luhn ( 4601398104203552 ); // true Rebilly . validate . card . luhn ( 4494590804949548 ); // true // the function will not strip dashes and spaces // and otherwise valid numbers will fail if passed with them Rebilly . validate . card . luhn ( 5349-2077-8395-2559 ); // false Rebilly . validate . card . luhn ( 5349207783952559 ); // true","title":"Luhn Algorithm"},{"location":"validation-tools/#card-number","text":"Ensures the card number is valid by checking the length and Luhn algorithm result. Spaces and dashes are ignored and can be passed along with the card number. Rebilly . validate . card . cardNumber ( 4601398104203552 ); // true Rebilly . validate . card . cardNumber ( 4494590804949548 ); // true // with spaces and dashes Rebilly . validate . card . cardNumber ( 4494 5908 0494 9548 ); // true Rebilly . validate . card . cardNumber ( 4494-5908-0494-9548 ); // true Rebilly . validate . card . cardNumber ( 43-57-45-59-57-71-61-42 ); // true // illegal characters Rebilly . validate . card . cardNumber ( 4357455AD#EE8 EEAG ); // false Rebilly . validate . card . cardNumber ( 4838.2379.4185.1360 ); // false","title":"Card Number"},{"location":"validation-tools/#card-expiry","text":"Validates the card's expiry month (mm) and year (yyyy). Only accepts digits as integers or strings. // invalid year format Rebilly . validate . card . expiry ( 01 , 15 ); // false // digits only Rebilly . validate . card . expiry ( jan , 2014 ); // false // invalid month Rebilly . validate . card . expiry ( 22 , 2022 ); // false // card expired Rebilly . validate . card . expiry ( 11 , 2001 ); // false // digit as strings Rebilly . validate . card . expiry ( 01 , 2035 ); // true // digits as integers Rebilly . validate . card . expiry ( 1 , 2033 ); // true // mix of string and integer Rebilly . validate . card . expiry ( 04 , 2031 ); // true","title":"Card Expiry"},{"location":"validation-tools/#cvv","text":"Validates the card's CVV number and length. Only accepts digits as integer or string. // digits only Rebilly . validate . card . cvv ( 1 2 3 ); // false Rebilly . validate . card . cvv ( 1a3 ); // false // invalid length Rebilly . validate . card . cvv ( 11111 ); // false // digit as string Rebilly . validate . card . cvv ( 011 ); // true // digits as integers Rebilly . validate . card . cvv ( 123 ); // true","title":"CVV"},{"location":"validation-tools/#customer-billing-address","text":"Customer data validation functions are found in the Rebilly . validate . customer namespace. All functions will return a boolean. Length restrictions are based on the Rebilly API specifications for each field. Unicode All address related validation functions (firstName, lastName, address, city, region) are Unicode compatible.","title":"Customer (Billing Address)"},{"location":"validation-tools/#first-name","text":"Validates the firstName field. Maximum length of 45 unicode characters. Commas, periods, single quotes and dashes , . - are allowed. Digits are not allowed. Rebilly . validate . customer . firstName ( Andrei Theodorescu ); //true //unicode Rebilly . validate . customer . firstName ( \u30ab\u30a6\u30dc\u30fc\u30a4\u30d3\u30d0\u30c3\u30d7 ); //true //invalid characters Rebilly . validate . customer . firstName ( Robert * Cloud ); //false Rebilly . validate . customer . firstName ( Jebediah_Morrisson ); //false","title":"First Name"},{"location":"validation-tools/#last-name","text":"Validates the lastName field. Maximum length of 45 unicode characters. Commas, periods, single quotes and dashes , . - are allowed. //unicode Rebilly . validate . customer . lastName ( \ud6c8\ubbfc\uc815\uc74c \u8a13\u6c11\u6b63\u97f3 ); //true Rebilly . validate . customer . lastName ( \u0437\u0434\u0440\u0430\u0432\u043e \u0437\u0431\u043e\u0433\u0443\u043c ); //true //with digits Rebilly . validate . customer . lastName ( De 08 Laurentiis ); //true //invalid characters Rebilly . validate . customer . lastName ( De;Laurentiis ); //false","title":"Last Name"},{"location":"validation-tools/#address","text":"Can be used to validate address and address2 fields. Maximum length of 60 unicode characters. Commas, periods, single quotes, dashes, hash signs, forward slashes and backslashes , . - / \\ are allowed. Rebilly . validate . customer . address ( 6745 Rue De Carufel ); // true // unicode Rebilly . validate . customer . address ( 012 Brunnenstra\u00dfe ); // true Rebilly . validate . customer . address ( \u74b0\u4e03\u901a\u308a/\u90fd\u9053318\u53f7\u7dda ); // true // invalid characters Rebilly . validate . customer . address ( 012 Brunnenstra\u00dfe $*$ * ); // false Rebilly . validate . customer . address ( Aftcastle, Berlin = 09:339:1 ); // false","title":"Address"},{"location":"validation-tools/#city","text":"Validates the city field. Maximum length of 45 unicode characters. Commas, periods, single quotes and dashes , . - are allowed. Rebilly . validate . customer . city ( Pozdravljeni adijo ); // true // invalid characters Rebilly . validate . customer . city ( Pozdravljeni ++ adijo ); // false","title":"City"},{"location":"validation-tools/#region","text":"Validates the region field. Maximum length of 45 unicode characters. Commas, periods, single quotes and dashes , . - are allowed. Rebilly . validate . customer . region ( Pozdravljeni adijo ); // true // invalid characters Rebilly . validate . customer . region ( Pozdravljeni ++ adijo ); // false","title":"Region"},{"location":"validation-tools/#postal-code","text":"Validates the postalCode field. Maximum length of 10 characters. Only letters, digits, spaces and dashes are allowed. Rebilly . validate . customer . postalCode ( h1n1n1 ); // true Rebilly . validate . customer . postalCode ( h1n-1n1 ); // true Rebilly . validate . customer . postalCode ( h2b 4g6 ); // true // invalid characters Rebilly . validate . customer . postalCode ( h1n+1n1 ); // false","title":"Postal Code"},{"location":"validation-tools/#phone-number","text":"Validates the phoneNumber field. Maximum length of 20 characters. Only digits, parentheses, spaces and dashes are allowed. The international call prefix + can also be used. // string Rebilly . validate . customer . phoneNumber ( (514) 321-7654 ); // true // integer - not recommended Rebilly . validate . customer . phoneNumber ( 5143217654 ); // true // international call prefix Rebilly . validate . customer . phoneNumber ( +01-800-4536 ); // true // invalid characters Rebilly . validate . customer . phoneNumber ( [514]-321-7654 ); // false Rebilly . validate . customer . phoneNumber ( 1-800-CALL ); // false","title":"Phone Number"}]}